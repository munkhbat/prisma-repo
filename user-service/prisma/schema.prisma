// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String               @id @unique @default(uuid())
  firstName String
  lastName  String
  password  String
  email     String
  role      String               @default("USER")
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  // Холболт
  userOrganizations UserOrganization[]
  tokens            Token[]

  @@map("users")
}

model Organization {
  id        String               @id @unique @default(uuid())
  name      String
  register  String
  email     String
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt

  // Холболт
  userOrganizations UserOrganization[]

  @@map("organizations")
}

model UserOrganization {
  id             String      @id @default(uuid())

  // Гадны түлхүүрүүд
  userId         String
  organizationId String

  // Харьцаа
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Role талбар
  role           String

  // Цаг тэмдэглэл
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@unique([userId, organizationId])
  @@map("user_organizations")
}

model Token {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  isActive  Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Харьцаа
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}


